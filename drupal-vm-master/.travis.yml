---
sudo: required

env:
  global:
    - CONFIG: example.config.yml
      MAKEFILE: example.drupal.make.yml
      HOSTNAME: drupalvm.dev
      MACHINE_NAME: drupalvm
      IP: 192.168.88.88
  matrix:
    - distribution: ubuntu
      version: 14.04
      init: /sbin/init
      run_opts: "--privileged"
    - distribution: ubuntu
      version: 14.04
      init: /sbin/init
      run_opts: "--privileged"
      additional_vars: ubuntu-14-nginx.yml
    - distribution: centos
      version: 7
      init: /usr/lib/systemd/systemd
      run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
      additional_vars: "centos-7-vars.yml"

services:
  - docker

before_install:
  # Pull container
  - 'sudo docker pull ${distribution}:${version}'
  # Customize container
  - 'sudo docker build --rm=true --file=tests/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible tests'
  # Install lint tools.
  - 'gem install rubocop'

script:
  - container_id=$(mktemp)

  # Run container in detached state
  - 'sudo docker run --detach --volume="${PWD}":/var/www/drupalvm/:rw ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'

  # Set hostname.
  - 'sudo docker exec "$(cat ${container_id})" hostname ${HOSTNAME}'

  # Setup directories.
  - 'sudo docker exec "$(cat ${container_id})" mkdir -p /var/www/drupalvm/drupal'

  # Install dependencies.
  - 'sudo docker exec "$(cat ${container_id})" ansible-galaxy install -r /var/www/drupalvm/provisioning/requirements.yml'

  # Copy configuration files into place.
  - 'sudo docker exec "$(cat ${container_id})" cp /var/www/drupalvm/$CONFIG /var/www/drupalvm/config.yml'
  - 'sudo docker exec "$(cat ${container_id})" cp /var/www/drupalvm/$MAKEFILE /var/www/drupalvm/drupal.make.yml'

  # Append additional variables.
  - 'sudo docker exec "$(cat ${container_id})" bash -c "cat /var/www/drupalvm/tests/test-vars.yml >> /var/www/drupalvm/config.yml" || true'
  - '[[ $additional_vars ]] && sudo docker exec "$(cat ${container_id})" bash -c "cat /var/www/drupalvm/tests/${additional_vars} >> /var/www/drupalvm/config.yml" || true'

  # Vagrantfile syntax check
  - 'rubocop --except LineLength,Eval,MutableConstant'

  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /var/www/drupalvm/provisioning/playbook.yml --syntax-check'

  # Run the playbook with ansible-playbook.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /var/www/drupalvm/provisioning/playbook.yml'

  # Run the integration tests
  - >
    sudo docker exec "$(cat ${container_id})" curl -s --header Host:${HOSTNAME} localhost
    | grep -q '<title>Welcome to Drupal'
    && (echo 'Drupal install pass' && exit 0)
    || (echo 'Drupal install fail' && exit 1)

  - >
    sudo docker exec "$(cat ${container_id})" curl -s --header Host:adminer.${HOSTNAME} localhost
    | grep -q '<title>Login - Adminer'
    && (echo 'Admin install pass' && exit 0)
    || (echo 'Adminer install fail' && exit 1)

  - >
    sudo docker exec "$(cat ${container_id})" curl -s --header Host:pimpmylog.${HOSTNAME} localhost
    | grep -q '<title>Pimp my Log'
    && (echo 'Pimp my Log install pass' && exit 0)
    || (echo 'Pimp my Log install fail' && exit 1)

  - >
    sudo docker exec "$(cat ${container_id})" curl -s --header Host:xhprof.${HOSTNAME} localhost
    | grep -q '<title>XHProf'
    && (echo 'XHProf install pass' && exit 0)
    || (echo 'XHProf install fail' && exit 1)

  - >
    sudo docker exec "$(cat ${container_id})" curl -s localhost:8025
    | grep -q '<title>MailHog'
    && (echo 'MailHog install pass' && exit 0)
    || (echo 'MailHog install fail' && exit 1)

  - >
    sudo docker exec "$(cat ${container_id})" curl -s --header Host:${IP} localhost
    | grep -q "<li>${IP} ${HOSTNAME}</li>"
    && (echo 'Dashboard install pass' && exit 0)
    || (echo 'Dashboard install fail' && exit 1)

  - >
    sudo docker exec "$(cat ${container_id})" drush @${MACHINE_NAME}.${HOSTNAME} status
    | grep -q 'Drupal bootstrap.*Successful'
    && (echo 'Drush install pass' && exit 0)
    || (echo 'Drush install fail' && exit 1)

  # Clean up
  - 'sudo docker stop "$(cat ${container_id})"'
